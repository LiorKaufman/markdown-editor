{"version":3,"sources":["initialMarkdown.md","components/Editor-Nav/editor-styles.module.css","App.module.css","lib/load-cdn.js","components/Editor-Nav/Editor-Nav.jsx","components/Editor/Editor.js","components/Preview/Preview.js","lib/linkRenderer.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","root","container","freeCodeCampCDN","document","createElement","src","body","appendChild","EditorNav","_ref","handleToggleShow","react_default","a","className","styles","type","onClick","Editor","text","handleChange","view","props","Object","objectWithoutProperties","assign","id","value","onChange","Preview","html","dangerouslySetInnerHTML","Renderer","marked","link","href","title","string","concat","localStorage","setItem","setOptions","gfm","tables","mangle","langPrefix","highlight","code","hljs","highlightAuto","renderer","linkRenderer","App","state","__html","fetch","initialMarkdown","request","markDown","this","setState","loadData","event","target","_this2","_this$state","Fragment","Editor_Nav","components_Editor_Editor","components_Preview_Preview","Component","rootElement","getElementById","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.99280399.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/initialMarkdown.4512f709.md\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"editor-styles_root__3uQCY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","const freeCodeCampCDN = document.createElement('script')\nfreeCodeCampCDN.src =\n  'https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js'\ndocument.body.appendChild(freeCodeCampCDN)\n","import React from 'react'\n\nimport styles from './editor-styles.module.css'\n\nconst EditorNav = ({ handleToggleShow }) => (\n  <nav className={styles.root}>\n    <ul>\n      <li>\n        <button type=\"button\" onClick={() => handleToggleShow('editor')}>Editor</button>\n      </li>\n\n      <li>\n        <button type=\"button\" onClick={() => handleToggleShow('preview')}>Preview</button>\n      </li>\n    </ul>\n  </nav>\n)\n\nexport default EditorNav\n","import React from 'react'\n\nconst Editor = ({ text, handleChange, view, ...props }) => {\n  return (\n    <textarea\n      className={view ? 'show' : 'hide'}\n      id=\"editor\"\n      {...props}\n      value={text}\n      onChange={handleChange}\n    />\n  )\n}\n\nexport default Editor\n","import React from 'react'\n\nconst Preview = ({ html, view }) => (\n  <div id=\"preview\" className={view ? 'show' : 'hide'} dangerouslySetInnerHTML={html} />\n)\n\nexport default Preview\n","import marked from 'marked'\n\nconst Renderer = new marked.Renderer()\n\nRenderer.link = (href, title, string) => {\n  title = title || ''\n\n  return `<a target=\"_blank\" rel=\"noopener noreferer\" href=\"${href}\" title=\"${title}\">${string}</a>`\n}\n\nexport default Renderer\n","import React, { Component } from 'react'\nimport marked from 'marked'\nimport hljs from 'highlight.js'\n\nimport './styles.css'\nimport 'highlight.js/styles/github.css'\n\nimport initialMarkdown from './initialMarkdown.md'\n\n\nimport EditorNav from './components/Editor-Nav'\nimport Editor from './components/Editor'\nimport Preview from './components/Preview'\nimport linkRenderer from './lib/linkRenderer'\n\nimport styles from './App.module.css'\nimport 'highlight.js/styles/dracula.css'\n\nlocalStorage.setItem('project_selector', 'markdown-previewer')\n\nmarked.setOptions({\n  gfm: true,\n  tables: true,\n  mangle: true,\n  langPrefix: 'hljs langauge-',\n  highlight: function(code) {\n    return hljs.highlightAuto(code).value\n  },\n  renderer: linkRenderer\n})\n\nclass App extends Component {\n  state = {\n    text: '',\n    html: { __html: marked('') },\n    view: 'editor'\n  }\n\n  async loadData() {\n    const request = await fetch(initialMarkdown)\n    const markDown = await request.text()\n\n    this.setState({\n      text: markDown,\n      html: { __html: marked(markDown) }\n    })\n  }\n\n  componentDidMount() {\n    this.loadData()\n  }\n\n  handleChange(event) {\n    const { value } = event.target\n    this.setState({\n      text: value,\n      html: { __html: marked(value) }\n    })\n  }\n\n  handleToggleShow(view) {\n    this.setState({\n      view\n    })\n  }\n\n  render() {\n    const { text, html, view } = this.state\n\n    return (\n      <>\n        <header>\n          <h1>Markdown Previewer</h1>\n        </header>\n\n        <EditorNav handleToggleShow={(view) => this.handleToggleShow(view)} />\n\n        <div className={styles.container}>\n          <Editor\n            text={text}\n            view={view === 'editor'}\n            handleChange={event => this.handleChange(event)}\n          />\n\n          <Preview html={html} view={view === 'preview'} />\n        </div>\n\n        <footer>\n          <small>&copy; 2019; Joseph Morse <a href=\"https://github.com/jnmorse\">GitHub</a></small>\n        </footer>\n      </>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport './lib/load-cdn'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<App />, rootElement)\n"],"sourceRoot":""}